data:                                      # See lib/datasets/EarthNet2021Dataset.py for a detailed description.
    dataset: earthnet2021                  # Name of the dataset, ['earthnet2021', 'sen12mscrts']
    root: data/                            # Data root directory
    hdf5_file: earthnet2021_iid_test_split_simulation.hdf5
    preprocessed: true
    split: iid
    channels: bgr-nir
    filter_settings:
        type: cloud-free                   # Strategy for removing observations with clouds/shadows/haze. ['cloud-free', 'cloud-free_consecutive']
        min_length: 5                      # Minimum sequence length.
        return_valid_obs_only: true        # True to return the cloud-filtered sequences, False otherwise.
    crop_settings:
        enabled: false                     # Activate/deactivate spatial cropping.
        shape: ${tuple:64,64}              # Spatial size of the cropped images.
    pe_strategy: day-of-year               # Strategy for positional encoding. ['day-of-year', 'day-within-sequence', 'absolute', 'enumeration']
    max_seq_length: 10                     # Maximum temporal sequence length. Set to None to skip temporal trimming.
    # render_occluded_above_p：完全遮盖输入图像所需的最低云覆盖率[-]。将其设置为None以保留原始云层遮罩。
    render_occluded_above_p: 0.9           # Minimum cloud cover [-] to fully mask an input image. Set to None to keep original cloud masks.
    return_cloud_mask: true                # Set to True if metrics/masked_metrics is True.

mask:
    mask_type: random_clouds               # Strategy for synthetic（合成的） data gap generation. ['random_clouds', 'real_clouds']
    # ratio_masked_frames：卫星图像时间序列中部分/完全遮挡图像的比率（上限）。
    ratio_masked_frames: 0.5               # Ratio of partially/fully masked images in a satellite image time series (upper bound).
    ratio_fully_masked_frames: 0.0         # Ratio of fully masked images in a satellite image time series (upper bound).
    fixed_masking_ratio: false             # True to vary the masking ratio across satellite image time series, False otherwise.
    non_masked_frames: [0]                 # list of int, time steps to be excluded from masking.
    intersect_real_cloud_masks: false      # True to intersect randomly sampled cloud masks with the actual cloud mask sequence, False otherwise.
    dilate_cloud_masks: false              # True to dilate the cloud masks before masking, False otherwise.
    fill_type: fill_value                  # Strategy for initializing masked pixels. ['fill_value', 'white_noise', 'mean']
    fill_value: 1                          # Pixel value of masked pixels. Used if fill_type == 'fill_value'.

    # 这些参数用于控制如何处理卫星图像时间序列中的数据缺失或云遮挡。以下是每个参数的意义：
    # 1. mask_type：合成数据缺失的策略，可以选择 'random_clouds'（随机生成云遮挡）或 'real_clouds'（使用实际云遮挡数据）。
    # 2. ratio_masked_frames：在卫星图像时间序列中，部分或完全遮挡图像的比例的上限。例如，0.5 表示最多可以有一半的图像被部分或完全遮挡。
    # 3. ratio_fully_masked_frames：在卫星图像时间序列中，完全遏挡图像的比例的上限。如果设置为 0.0，表示不会有完全遮挡的图像。
    # 4. fixed_masking_ratio：如果设置为 True，则会在不同的卫星图像时间序列之间保持相同的遮挡比率。如果设置为 False，则会随机变化遮挡比率。
    # 5. non_masked_frames：一个整数列表，指定不需要进行遮挡的时间步。例如，[0] 表示在时间步 0 不进行遮挡。
    # 6. intersect_real_cloud_masks：如果设置为 True，则会将随机生成的云遮挡掩码与实际云遮挡掩码相交，以获得更真实的遮挡情况。如果设置为 False，则会忽略实际云遮挡数据。
    # 7. dilate_cloud_masks：如果设置为 True，则会在进行遮挡之前对云遮挡掩码进行膨胀处理。这可以增加遮挡的范围。
    # 8. fill_type：初始化遮挡像素的策略，可以选择 'fill_value'（使用指定的像素值填充遮挡像素）或 'white_noise'（使用白噪声填充遮挡像素）或 'mean'（使用周围像素的均值填充遮挡像素）。
    # 9.fill_value：如果 fill_type 设置为 'fill_value'，则指定要用于填充遮挡像素的像素值。
    # 这些参数允许您配置如何生成或处理具有数据缺失或云遮挡的卫星图像时间序列，以便进行后续分析或训练模型。

method:
    model_type: utilise
    pad_value: 0

utilise:                                   # See lib/models/utilise.py for a detailed description.
    encoder_widths: [64,64,64,128]
    decoder_widths: [64,64,64,128]
    upconv_type: transpose
    encoder_norm:
    decoder_norm:
    skip_norm:
    activation: relu
    str_conv_k: 4
    str_conv_s: 2
    str_conv_p: 1
    str_conv_k_up: 2
    str_conv_p_up: 0
    skip_attention: false
    n_temporal_encoding_layers: 1
    agg_mode: att_group
    n_head: 4
    d_k: 4
    bias_qk: false
    attn_dropout: 0.1
    dropout: 0.1
    n_groups: 4
    ltae_norm: group
    ltae_activation: gelu
    norm_first: true
    output_activation: sigmoid

training_settings:
    batch_size: 3                          # Batch size.
    num_epochs: 1000                       # Number of training epochs.
    accum_iter: 1                          # Accumulate gradients for 'accum_iter` iterations.
    gradient_clip_norm: 0                  # If > 0, clips gradient norm to that value.
    gradient_clip_value: 0                 # If > 0, clips gradient at specified value.
    resume: false                          # True to resume training, False otherwise.
    pretrained_path: ''                    # Path to the pretrained model weights.

optimizer:
    name: Adam                             # Optimizer.
    learning_rate: 2.e-04                  # Initial learning rate.
    weight_decay: 0                        # Weight decay.

scheduler:
    name: MultiStepLR                      # Learning rate scheduler.
    enabled: true                          # Activate/deactivate the learning rate scheduler.
    milestones: [50, 100, 150, 200, 250]   # Settings of the learning rate scheduler.
    gamma: 0.5

loss:
    ssim_loss: false                       # SSIM loss.
    l1_loss: true                          # L1 reconstruction loss computed over all pixels.
    l1_loss_occluded_input_pixels: false   # L1 reconstruction loss computed over all masked pixels in the input sequence.
    l1_loss_observed_input_pixels: false   # L1 reconstruction loss computed over all observed pixels in the input sequence.
    masked_l1_loss: false                  # L1 reconstruction loss computed over all pixels with valid ground truth (real cloud masks used for masking remaining clouds).
    ssim_loss_w: 1.0                       # Weight for `ssim_loss`.
    l1_loss_w: 1.0                         # Weight for `l1_loss`.
    l1_loss_occluded_input_pixels_w: 1.0   # Weight for `l1_loss_occluded_input_pixels`.
    l1_loss_observed_input_pixels_w: 1.0   # Weight for `l1_loss_observed_input_pixels`.
    masked_l1_loss_w: 1.0                  # Weight for `masked_l1_loss`.

metrics:
    masked_metrics: true                   # True to compute all pixel-based metrics only over all pixels with valid ground truth, False to evaluate all pixels.
    mae: true                              # Mean absolute error (MAE), computed over all pixels.
    mse: true                              # Mean square error (MSE).
    rmse: true                             # Root mean square error (RMSE).
    ssim: true                             # Structural similarity index (SSIM).
    psnr: true                             # Peak signal-to-noise ratio (PSNR).
    sam: true                              # Spectral angle mapper (SAM).

misc:
    logstep_train: 100                     # Training log interval in number of iterations.
    checkpoint_every_n_epochs: 5           # Save checkpoint after every `checkpoint_every_n_epochs` training epochs.
    log_gradients: false                   # True to log gradients and model parameters using Weights & Biases.
    val_every_n_epochs: 1                  # Validation interval in epochs.
    plot_every_n_epochs: 15                # Plot interval in epochs.
    plot_val_sample: []                    # List of int, indices of the validation samples to be visualized during training using Weights & Biases.
    num_workers: 8                         # Number of dataloader worker processes.
    random_seed: 0                         # Random seed.
    pin_memory: false                      # Pin memory (dataloader settings).
    run_mode: train                        # Run mode. ['train', 'val', 'test']

output:
    suffix:                                # Suffix appended to the name of the experiment directory.
    plot_model_txt: true                   # True to dump the model architecture to a txt file, False otherwise.
